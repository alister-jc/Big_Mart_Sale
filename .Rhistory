3 + 4
q()
q()
setwd("C:/Users/Alister/Desktop/Big Mart Sales")
library(data.table) # used for reading and manipulation of data
library(dplyr)      # used for data manipulation and joining
library(ggplot2)    # used for ploting
library(caret)      # used for modeling
library(corrplot)   # used for making correlation plot
library(xgboost)    # used for building XGBoost model
library(cowplot)    # used for combining multiple plots
library(magrittr)
train = fread("Train_UWu5bXk.csv")
test = fread("Test_u94Q5KV.csv")
submission = fread("SampleSubmission_TmnO39y.csv")
dim(train)
dim(test)
names(train)
names(test)
str(train)
str(test)
test[, Item_Outlet_Sales := NA]
combi = rbind(train, test)
dim(combi)
str(combi)
ggplot(train) + geom_histogram(aes(train$Item_Outlet_Sales),
binwidth = 100, fill = "darkblue") + xlab("Item Outlet Sales")
p1 = ggplot(combi) + geom_histogram(aes(Item_Weight), binwidth = 0.5, fill = "green")
p2 = ggplot(combi) + geom_histogram(aes(Item_Visibility), binwidth = 0.005, fill = "green")
p3 = ggplot(combi) + geom_histogram(aes(Item_MRP), binwidth = 1, fill = "green" )
plot_grid(p1, p2, p3, nrow = 1) #plot_grid() from cowplot package
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
combi$Item_Fat_Content[combi$Item_Fat_Content == "LF"] = "Low Fat"
combi$Item_Fat_Content[combi$Item_Fat_Content == "low fat"] = "Low Fat"
combi$Item_Fat_Content[combi$Item_Fat_Content == "reg"] = "Regular"
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
p4 = ggplot(combi %>% group_by(Item_Type) %>% summarise(Count = n())) +
geom_bar(aes(Item_Type, Count), stat = "identity", fill = "coral1") +
xlab("") +
geom_label(aes(Item_Type, Count, label = Count), vjust = 0.5) +
theme(axis.text = element_text(angle = 45, hjust = 1))+
ggtitle("Item_Type")
p5 = ggplot(combi %>% group_by(Outlet_Identifier) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Identifier, Count), stat = "identity", fill = "coral1") +
geom_label(aes(Outlet_Identifier, Count, label = Count), vjust = 0.5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
p6 = ggplot(combi %>% group_by(Outlet_Size) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Size, Count), stat = "identity", fill = "coral1") +
geom_label(aes(Outlet_Size, Count, label = Count), vjust = 0.5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
second_row = plot_grid(p5, p6, nrow = 1)
plot_grid(p4, second_row, ncol = 1)
p7 = ggplot(combi %>% group_by(Outlet_Establishment_Year) %>% summarise(Count = n())) +
geom_bar(aes(factor(Outlet_Establishment_Year), Count), stat = "identity", fill = "coral1") +
geom_label(aes(factor(Outlet_Establishment_Year), Count, label = Count), vjust = 0.5) +
xlab("Outlet_Establishment_Year") +
theme(axis.text.x = element_text(size = 8.5))
p8 = ggplot(combi %>% group_by(Outlet_Type) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Type, Count), stat = "identity", fill = "coral1") +
geom_label(aes(factor(Outlet_Type), Count, label = Count), vjust = 0.5) +
theme(axis.text.x = element_text(size = 8.5))
plot_grid(p7, p8, ncol = 2)
train = combi[1:nrow(train)] # extracting train data from the combined data
p9 = ggplot(train) +
geom_point(aes(Item_Weight, Item_Outlet_Sales), colour = "violet", alpha = 0.3) +
theme(axis.title = element_text(size = 8.5))
p10 = ggplot(train) +
geom_point(aes(Item_Visibility, Item_Outlet_Sales), colour = "violet", alpha = 0.3) +
theme(axis.title = element_text(size = 8.5))
p11 = ggplot(train) +
geom_point(aes(Item_MRP, Item_Outlet_Sales), colour = "violet", alpha = 0.3) +
theme(axis.title = element_text(size = 8.5))
second_row_2 = plot_grid(p10, p11, ncol = 2)
plot_grid(p9, second_row_2, nrow = 2)
p12 = ggplot(train) +
geom_violin(aes(Item_Type, Item_Outlet_Sales), fill = "magenta") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text = element_text(size = 6),
axis.title = element_text(size = 8.5))
p13 = ggplot(train) +
geom_violin(aes(Item_Fat_Content, Item_Outlet_Sales), fill = "magenta") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text = element_text(size = 8),
axis.title = element_text(size = 8.5))
p14 = ggplot(train) +
geom_violin(aes(Outlet_Identifier, Item_Outlet_Sales), fill = "magenta") +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
axis.text = element_text(size = 8),
axis.title = element_text(size = 8.5))
second_row_3 = plot_grid(p13, p14, ncol = 2)
plot_grid(p12, second_row_3, ncol = 1)
ggplot(train) + geom_violin(aes(Outlet_Size, Item_Outlet_Sales), fill = "magenta")
p15 = ggplot(train) + geom_violin(aes(Outlet_Location_Type, Item_Outlet_Sales), fill = "brown")
p16 = ggplot(train) + geom_violin(aes(Outlet_Type, Item_Outlet_Sales), fill = "brown")
plot_grid(p15, p16, ncol = 1)
sum(is.na(combi$Item_Weight)
em weight
sum(is.na(combi$Item_Weight))
missing_index = which(is.na(combi$Item_Weight))
for(i in missing_index){
item = combi$Item_Weight[i] = mean(combi$Item_Weight[combi$Item_Identifier == item], na.rm = T)
missing_index = which(is.na(combi$Item_Weight))
for(i in missing_index){
item = combi$Item_Weight[i] = mean(combi$Item_Weight[combi$Item_Identifier == item], na.rm = T)
}
sum(is.na(combi$Item_Weight))
em weight
sum(is.na(combi$Item_Weight))
sum(is.na(combi$Item_Weight))
missing_index = which(is.na(combi$Item_Weight))
for(i in missing_index){
item = combi$Item_Weight[i] = mean(combi$Item_Weight[combi$Item_Identifier == item], na.rm = T)
}
with the mean weight
missing_index = which(is.na(combi$Item_Weight))
for(i in missing_index){
item = combi$Item_Identifier[i]
combi$Item_Weight[i]= mean(combi$Item_Weight[combi$Item_Identifier == item], na.rm = T)
}
sum(is.na(combi$Item_Weight))
ggplot(combi) + geom_histogram(aes(Item_Visibility), bins = 100)
zero_index = which(combi$Item_Visibility == 0)
for(i in zero_index){
item = combi$Item_Identifier[i]
combi$Item_Visibility[i] = mean(combi$Item_Visibility[combi$Item_Identifier ==item], na.rm = T)
}
ggplot(combi) + geom_histogram(aes(Item_Visibility), bins = 100) #visual depiction of 0's
View(train)
perishable = c("Breads", "Breakfast", "Dairy", "Fruits and Vegetables", "Meat", "Seafood")
non_perishable = c("Baking Goods", "Canned", "Frozen Foods", "Hard Drinks", "Health and Hygiene", "Household", "Soft Drinks")
#Creating "Item_Type_new"
combi[, Item_Type_new := ifelse(Item_Type %in% perishable, "perishable", ifelse(Item_Type %in% non_perishable, "non_perishable", "not_sure"))]
View(combi)
table(combi$Item_Type, substr(combi$Item_Identifier, 1, 2))
combi[, Item_category := substr(combi$Item_Identifier, 1, 2)]
View(combi)
combi$Item_Fat_Content[combi$Item_category == "NC"] = "Non-Edible"
combi[, Outlet_Years := 2018 - combi$Outlet_Establishment_Year]
combi$Outlet_Establishment_Year = as.factor(combi$Outlet_Establishment_Year)
combi[, price_per_unit_wt := Item_MRP/Item_Weight]
combi[, item_MRP_clusters := ifelse(Item_MRP < 69, "1st",
ifelse(Item_MRP >= 69 &Item_MRP < 136, "2nd",
ifelse(Item_MRP >=136 & Item_MRP < 203, "3rd", "4th")))]
combi[, price_per_unit_wt := Item_MRP/Item_Weight]
combi[, item_MRP_clusters := ifelse(Item_MRP < 69, "1st",
ifelse(Item_MRP >= 69 &Item_MRP < 136, "2nd",
ifelse(Item_MRP >=136 & Item_MRP < 203, "3rd", "4th")))]
combi[,item_MRP_clusters := ifelse(Item_MRP < 69, "1st",
ifelse(Item_MRP >= 69 &Item_MRP < 136, "2nd",
ifelse(Item_MRP >=136 & Item_MRP < 203, "3rd", "4th")))]
combi[,Item_MRP_clusters := ifelse(Item_MRP < 69, "1st",
ifelse(Item_MRP >= 69 & Item_MRP < 136, "2nd",
ifelse(Item_MRP >= 136 & Item_MRP < 203, "3rd", "4th")))]
str(combi)
View(combi)
combi <- combi[(,-18)]
combi <- combi[,-18]
combi[,item_MRP_clusters := ifelse(Item_MRP < 69, "1st",
ifelse(Item_MRP >= 69 & Item_MRP < 136, "2nd",
ifelse(Item_MRP >= 136 & Item_MRP < 203, "3rd", "4th")))]
setwd("C:/Users/Neebal/Desktop/Projects in R/Big mart")
View(combi)
str(combi)
combi[, Outlet_Size_num := ifelse(Outlet_Size == "Small", 0,
ifelse(Outlet_Size == "Medium", 1,2))]
combi[, Outlet_Location_Type_num := ifelse(Outlet_Location_Type == "Tier 3", 0,
ifelse(Outlet_Location_Type == "Tier 2", 1, 2))]
#Removing categorical variables after encoding
combi[, c("Outlet_Size", "Outlet_Location_Type") := NULL]
library(data.table) # used for reading and manipulation of data
library(dplyr)      # used for data manipulation and joining
library(ggplot2)    # used for ploting
library(caret)      # used for modeling
library(corrplot)   # used for making correlation plot
library(xgboost)    # used for building XGBoost model
library(cowplot)    # used for combining multiple plots
library(magrittr)
install.packages("data.table")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(data.table) # used for reading and manipulation of data
library(dplyr)      # used for data manipulation and joining
library(ggplot2)    # used for ploting
library(caret)      # used for modeling
library(corrplot)   # used for making correlation plot
library(xgboost)    # used for building XGBoost model
library(cowplot)    # used for combining multiple plots
library(magrittr)
install.packages("xgboost")
library(data.table) # used for reading and manipulation of data
library(dplyr)      # used for data manipulation and joining
library(ggplot2)    # used for ploting
library(caret)      # used for modeling
library(corrplot)   # used for making correlation plot
library(xgboost)    # used for building XGBoost model
library(cowplot)    # used for combining multiple plots
library(magrittr)
install.packages("dplyr")
library(data.table) # used for reading and manipulation of data
library(dplyr)      # used for data manipulation and joining
library(ggplot2)    # used for ploting
library(caret)      # used for modeling
library(corrplot)   # used for making correlation plot
library(xgboost)    # used for building XGBoost model
library(cowplot)    # used for combining multiple plots
library(magrittr)
str(combi)
combi[, Outlet_Size_num := ifelse(Outlet_Size == "Small", 0,
ifelse(Outlet_Size == "Medium", 1,2))]
combi[, Outlet_Location_Type_num := ifelse(Outlet_Location_Type == "Tier 3", 0,
ifelse(Outlet_Location_Type == "Tier 2", 1, 2))]
combi[, c("Outlet_Size", "Outlet_Location_Type") := NULL]
str(combi)
combi[, Outlet_Size_num := ifelse(Outlet_Size == "Small", 0,
ifelse(Outlet_Size == "Medium", 1,2))]
combi[, Outlet_Location_Type_num := ifelse(Outlet_Location_Type == "Tier 3", 0,
ifelse(Outlet_Location_Type == "Tier 2", 1, 2))]
combi[, c("Outlet_Size", "Outlet_Location_Type") := NULL]
View(combi)
ohe = dummyVars("~.", data = combi[, -c("Item_Identifier", "Outlet_Establishment_Year", "Item_Type")], fullRank = T)
ohe_df = data.table(predict(ohe, combi[, -c("Item_Identifier", "Outlet_Establishment_Year", "Item_Type")]))
combi = cbind(combi[, "Item_Identifier"], ohe_df)
combi[, Item_Visibility := log(Item_Visibility + 1)] #log +1 to avoid division by zero
combi[, price_per_unit_wt := log(price_per_unit_wt +1)]
combi[, Item_Visibility := log(Item_Visibility + 1)] #log +1 to avoid division by zero
combi[, price_per_unit_wt := log(price_per_unit_wt +1)]
#Scaling the numeric predicators from 0 to 1
num_vars = which(sapply(combi, is.numeric)) #index of numeric features
num_vars_name = names(num_vars)
combi_numeric = combi[, setdiff(num_vars_name, "Item_Outlet_Sales"), with = F]
prep_num = preProcess(combi_numeric, method = c("center", "scale"))
combi_numeric_norm = predict(prep_num, combi_numeric)
combi[, setdiff(num_vars_names, "Item_Outlet_Sales") := NULL] #removing numeric independent variable
combi = cbind(combi, combi_numeric_norm)
combi[, Item_Visibility := log(Item_Visibility + 1)] #log +1 to avoid division by zero
combi[, price_per_unit_wt := log(price_per_unit_wt +1)]
#Scaling the numeric predicators from 0 to 1
num_vars = which(sapply(combi, is.numeric)) #index of numeric features
num_vars_name = names(num_vars)
combi_numeric = combi[, setdiff(num_vars_name, "Item_Outlet_Sales"), with = F]
prep_num = preProcess(combi_numeric, method = c("center", "scale"))
combi_numeric_norm = predict(prep_num, combi_numeric)
combi[, setdiff(num_vars_name, "Item_Outlet_Sales") := NULL] #removing numeric independent variable
combi = cbind(combi, combi_numeric_norm)
train = combi[1:nrow(train)]
test = combi[(nrow(train) + 1):nrow(combi)]
test[, Item_Outlet_Sales := NULL]#Removing item_outlet_sales as it contains
cor_train = cor(train[,-c("Item_Identifier")])
corrplot(cor_train, method = "pie", type = "lower", tl.cex = 0.9)
cor_train = cor(train[,-c("Item_Identifier")])
corrplot(cor_train, method = "number", type = "full", tl.cex = 0.9)
cor_train = cor(train[,-c("Item_Identifier")])
corrplot(cor_train, method = "number", type = "lower", tl.cex = 0.9)
#Finding the corelated variables
cor_train = cor(train[,-c("Item_Identifier")])
corrplot(cor_train, method = "number", type = "lower", tl.cex = 0.1)
#Finding the corelated variables
cor_train = cor(train[,-c("Item_Identifier")])
corrplot(cor_train, method = "number", type = "lower", tl.cex = 1)
cor_train = cor(train[,-c("Item_Identifier")])
corrplot(cor_train, method = "square", type = "lower", tl.cex = 1)
cor_train = cor(train[,-c("Item_Identifier")])
corrplot(cor_train, method = "square", type = "lower", tl.cex = 0.8)
setwd("C:/Users/Alister/Desktop/Big Mart Sales")
setwd("C:/Users/Alister/Desktop/Big Mart Sales")
linear_reg_mod = lm(Item_Outlet_Sales ~ ., data = train[,-c("Item_Identifier")])
library(data.table) # used for reading and manipulation of data
library(dplyr)      # used for data manipulation and joining
library(ggplot2)    # used for ploting
library(caret)      # used for modeling
library(corrplot)   # used for making correlation plot
library(xgboost)    # used for building XGBoost model
library(cowplot)    # used for combining multiple plots
library(magrittr)
linear_reg_mod = lm(Item_Outlet_Sales ~ ., data = train[,-c("Item_Identifier")])
submission$Item_Outlet_Sales = predict(linear_reg_mod, test[,-c("Item_Identifier")])
write.csv(submission, "Linear_Reg_submit.csv", row.names = F)
View(submission)
linear_reg_mod = lm(Item_Outlet_Sales ~ ., data = train[,-c("Item_Identifier")])
linear_reg_mod = lm(Item_Outlet_Sales ~ ., data = train[,-c("Item_Identifier")])
View(train)
f <- reformulate(setdiff(colnames(train), "Item_Outlet_Sales"), response="Item_Outlet_Sales")
linear_reg_mod = lm(Item_Outlet_Sales ~ ., data = train[,-c("Item_Identifier")])
library(data.table) # used for reading and manipulation of data
library(dplyr)      # used for data manipulation and joining
library(ggplot2)    # used for ploting
library(caret)      # used for modeling
library(corrplot)   # used for making correlation plot
library(xgboost)    # used for building XGBoost model
library(cowplot)    # used for combining multiple plots
library(magrittr)
train = fread("Train_UWu5bXk.csv")
test = fread("Test_u94Q5KV.csv")
submission = fread("SampleSubmission_TmnO39y.csv")
test[, Item_Outlet_Sales := NA]
combi = rbind(train, test)
dim(combi)
str(combi)
p1 = ggplot(combi) + geom_histogram(aes(Item_Weight), binwidth = 0.5, fill = "green")
p2 = ggplot(combi) + geom_histogram(aes(Item_Visibility), binwidth = 0.005, fill = "green")
p3 = ggplot(combi) + geom_histogram(aes(Item_MRP), binwidth = 1, fill = "green" )
plot_grid(p1, p2, p3, nrow = 1) #plot_grid() from cowplot package
combi$Item_Fat_Content[combi$Item_Fat_Content == "LF"] = "Low Fat"
combi$Item_Fat_Content[combi$Item_Fat_Content == "low fat"] = "Low Fat"
combi$Item_Fat_Content[combi$Item_Fat_Content == "reg"] = "Regular"
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
train = combi[1:nrow(train)] # extracting train data from the combined data
sum(is.na(combi$Item_Weight))
missing_index = which(is.na(combi$Item_Weight))
for(i in missing_index){
missing_index = which(is.na(combi$Item_Weight))
for(i in missing_index){
item = combi$Item_Identifier[i]
combi$Item_Weight[i]= mean(combi$Item_Weight[combi$Item_Identifier == item], na.rm = T)
}
sum(is.na(combi$Item_Weight))
ggplot(combi) + geom_histogram(aes(Item_Visibility), bins = 100) #visual depiction of 0's
ggplot(combi) + geom_histogram(aes(Item_Visibility), bins = 100) #visual depiction of 0's
zero_index = which(combi$Item_Visibility == 0)
for(i in zero_index){
item = combi$Item_Identifier[i]
combi$Item_Visibility[i] = mean(combi$Item_Visibility[combi$Item_Identifier ==item], na.rm = T)
}
perishable = c("Breads", "Breakfast", "Dairy", "Fruits and Vegetables", "Meat", "Seafood")
non_perishable = c("Baking Goods", "Canned", "Frozen Foods", "Hard Drinks", "Health and Hygiene", "Household", "Soft Drinks")
combi[, Item_Type_new := ifelse(Item_Type %in% perishable, "perishable", ifelse(Item_Type %in% non_perishable, "non_perishable", "not_sure"))]
table(combi$Item_Type, substr(combi$Item_Identifier, 1, 2))
combi[, Item_category := substr(combi$Item_Identifier, 1, 2)]
combi$Item_Fat_Content[combi$Item_category == "NC"] = "Non-Edible"
combi[, Outlet_Years := 2018 - combi$Outlet_Establishment_Year]
combi$Outlet_Establishment_Year = as.factor(combi$Outlet_Establishment_Year)
combi[, price_per_unit_wt := Item_MRP/Item_Weight]
combi[,item_MRP_clusters := ifelse(Item_MRP < 69, "1st",
ifelse(Item_MRP >= 69 & Item_MRP < 136, "2nd",
ifelse(Item_MRP >= 136 & Item_MRP < 203, "3rd", "4th")))]
str(combi)
str(combi)
setwd("C:/Users/Alister/Desktop/Big Mart Sales")
library(data.table) # used for reading and manipulation of data
library(dplyr)      # used for data manipulation and joining
library(ggplot2)    # used for ploting
library(caret)      # used for modeling
library(corrplot)   # used for making correlation plot
library(xgboost)    # used for building XGBoost model
library(cowplot)    # used for combining multiple plots
library(magrittr)
str(combi)
linear_reg_mod = lm(Item_Outlet_Sales ~ ., data = train[, -c("Item_Identifier")])
linear_reg_mod = lm(Item_Outlet_Sales ~ ., data = train[, -c("Item_Identifier","Item_Weight")])
str(train)
View(train)
linear_reg_mod = lm(Item_Outlet_Sales ~ ., data = train[, -c("Item_Identifier","Item_Weight","Item_Fat_ContentNon-Edible")])
linear_reg_mod = lm(Item_Outlet_Sales ~ ., data = train[, -c("Item_Identifier","Item_Weight","Item_Fat_ContentNon-Edible", "Item_Fat_ContentRegular")])
source('C:/Users/Alister/Desktop/Big Mart Sales/Big_mart_R.R', echo=TRUE)
submission$Item_Outlet_Sales = predict(linear_reg_mod, test[,-c("Item_Identifier")])
write.csv(submission, "Linear_Reg_submit.csv", row.names = F)
View(submission)
