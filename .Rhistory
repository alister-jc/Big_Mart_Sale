View(train_data)
View(test_data)
model=lm(RentalCount ~ Month + Day + FWeekDay + FSnow + FHoliday, train_data,)
p = predict(model, test_data)
plot(p - test_counts)
library(rpart)
model=rpart(RentalCount ~ Month + Day + FWeekDay + FSnow + FHoliday, train_data,)
p = predict(model, test_data)
plot(p - test_counts)
predict(model, data.frame(Month = 1, Day = 1, FWeekDay = factor(4), FSnow = factor(1), FHoliday = factor(0)))
#let's try to predict the same data that they use at the session
predict(model, data.frame(Month = 1, Day = 1, FWeekDay = factor(7), FSnow = factor(1), FHoliday = factor(0)))
#on a sunday Day(7) the output is 645.7059
predict(model, data.frame(Month = 1, Day = 1, FWeekDay = factor(4), FSnow = factor(1), FHoliday = factor(0)))
#on a Thursday Day(4) the output is ... way smaller :)
mydata =
read.table("C:/Users/Neebal/Desktop/Predicitve Model/Data1.txt", header=TRUE)
#play with the data set, list the columns
colnames(mydata)
#important...if your first column name is "X..Year",
#then let's change its name to "Year", or nothing will work :P
colnames(mydata)[1] <- "Year"
#visualize the complete set
mydata
#or just few rows
head(mydata)
#we are also going to create 3 additional columns on the data set
#this helps when building the model because we're explicitly saying
#that these values are categorical (kind of an enum in other #languages)
mydata$FHoliday = factor(mydata$Holiday)
mydata$FSnow = factor(mydata$Snow)
mydata$FWeekDay = factor(mydata$WeekDay)
#now let's split the data into 2 different sets
#one for training the model and the other one for validating it
train_data = mydata[mydata$Year < 2015,]
test_data = mydata[mydata$Year == 2015,]
#...and also save this specific column as a vector
#we will use it for a bulk check of the quality of the prediction
test_counts <- test_data$RentalCount
#let's play with visualizations
#it's super important to invest some time on plotting and playing #with the data, it can help us get a good intuition to choose an #algorithm, or help us identify issues
plot(mydata$Snow, mydata$RentalCount)
plot(factor(mydata$Snow), mydata$RentalCount)
plot(factor(mydata$WeekDay), mydata$RentalCount)
plot(ISOdate(mydata$Year, mydata$Month, mydata$Day), mydata$RentalCount)
model=lm(RentalCount ~ Month + Day + FWeekDay + FSnow + FHoliday, train_data,)
p = predict(model, test_data)
plot(p - test_counts)
library(rpart)
model=rpart(RentalCount ~ Month + Day + FWeekDay + FSnow + FHoliday, train_data,)
p = predict(model, test_data)
plot(p - test_counts)
#let's try to predict the same data that they use at the session
predict(model, data.frame(Month = 1, Day = 1, FWeekDay = factor(7), FSnow = factor(1), FHoliday = factor(0)))
#on a sunday Day(7) the output is 645.7059
predict(model, data.frame(Month = 1, Day = 1, FWeekDay = factor(4), FSnow = factor(1), FHoliday = factor(0)))
#on a Thursday Day(4) the output is ... way smaller :)
library(splines)
data()
Install.packages(“MASS”)
Library(MASS)
Data()
Install.packages(“MASS”)
data("airquality")
attach(airquality)
head(airquality, 10)
summary(airquality)
mydata =
read.table("C:/Users/Neebal/Desktop/Predicitve Model/Data1.txt", header=TRUE)
#play with the data set, list the columns
colnames(mydata)
#important...if your first column name is "X..Year",
#then let's change its name to "Year", or nothing will work :P
colnames(mydata)[1] <- "Year"
#visualize the complete set
mydata
#or just few rows
head(mydata)
#we are also going to create 3 additional columns on the data set
#this helps when building the model because we're explicitly saying
#that these values are categorical (kind of an enum in other #languages)
mydata$FHoliday = factor(mydata$Holiday)
mydata$FSnow = factor(mydata$Snow)
mydata$FWeekDay = factor(mydata$WeekDay)
#now let's split the data into 2 different sets
#one for training the model and the other one for validating it
train_data = mydata[mydata$Year < 2015,]
test_data = mydata[mydata$Year == 2015,]
#...and also save this specific column as a vector
#we will use it for a bulk check of the quality of the prediction
test_counts <- test_data$RentalCount
#let's play with visualizations
#it's super important to invest some time on plotting and playing #with the data, it can help us get a good intuition to choose an #algorithm, or help us identify issues
plot(mydata$Snow, mydata$RentalCount)
plot(factor(mydata$Snow), mydata$RentalCount)
plot(factor(mydata$WeekDay), mydata$RentalCount)
plot(ISOdate(mydata$Year, mydata$Month, mydata$Day), mydata$RentalCount)
model=lm(RentalCount ~ Month + Day + FWeekDay + FSnow + FHoliday, train_data,)
p = predict(model, test_data)
plot(p - test_counts)
library(rpart)
model=rpart(RentalCount ~ Month + Day + FWeekDay + FSnow + FHoliday, train_data,)
p = predict(model, test_data)
plot(p - test_counts)
#let's try to predict the same data that they use at the session
predict(model, data.frame(Month = 1, Day = 1, FWeekDay = factor(7), FSnow = factor(1), FHoliday = factor(0)))
#on a sunday Day(7) the output is 645.7059
predict(model, data.frame(Month = 1, Day = 1, FWeekDay = factor(4), FSnow = factor(1), FHoliday = factor(0)))
#on a Thursday Day(4) the output is ... way smaller :)
read.table("C:/Users/Neebal/Desktop/Predicitve Model/Data1.txt", header=TRUE)
library(rpart)
View(mydata)
print(p);
rintcp(p);
printcp(p);
printcp(model);
View(airquality)
install.packages("survival")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Load the library.
install.packages('survival')
install.packages('survival')
print(head(pbc))
print(head[pbc])
print(head
(pbc))
source('~/.active-rstudio-document', echo=TRUE)
# Create the survival object.
survfit(Surv(pbc$time,pbc$status == 2)~1)
# Give the chart file a name.
png(file = "survival.png")
# Plot the graph.
plot(survfit(Surv(pbc$time,pbc$status == 2)~1))
# Save the file.
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(caret)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(caret)
library(datasets)
data(mtcars)
split<-createDataPartition(y = mtcars$mpg, p = 0.6, list = FALSE)
dev<-mtcars[split,]
val<-mtcars[-split,]
source('~/.active-rstudio-document', echo=TRUE)
install.packages("caret")
install.packages(c("boot", "Matrix", "mgcv"))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(mtcars)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("randomForest")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("RPostgreSQL")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
con <- dbConnect(drv, host='h2o-production-db.clxzsf7yjrn8.ap-southeast-1.rds.amazonaws.com',dbname=' neebalSalesForceDB' port='5432', dbname='neebalSalesForceDB',
user='h2oanalytics', password='analytics@h2o')
library(readr)
Vasu10k_ <- read_csv("C:/Users/Neebal/Desktop/Data for R/Vasu for R.csv")
View(Vasu10k_)
library(readr)
Vasu<- read.csv("C:/Users/Neebal/Desktop/Data for R/Vasu for R.csv", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "", ...)
Vasu<- read.csv("C:/Users/Neebal/Desktop/Data for R/Vasu for R.csv", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "")
library(readr)
Vasu<- read.csv("C:/Users/Neebal/Desktop/Data for R/Vasu for R.csv", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE)
View(Vasu)
library(readr)
Vasu<- read.csv("C:/Users/Neebal/Desktop/Data for R/Vasu for R.csv", header = TRUE, sep = "|", quote = "\"",
dec = ".", fill = TRUE, comment.char = "")
View(Vasu)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library("ggplot2", lib.loc="~/R/R-3.4.1/library")
install.packages("ggplot")
install.packages("ggplot2")
source('~/.active-rstudio-document', echo=TRUE)
library("ggplot2", lib.loc="~/R/R-3.4.1/library")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="~/R/R-3.4.1/library")
install.packages("xts")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("forecast")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library("fracdiff", lib.loc="~/R/R-3.4.1/library")
install.packages("fracdiff")
install.packages("fracdiff")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ggplot2")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("tseries")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("tseries")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dates <- Vasu$date_time
values <- Vasu$pob
myts <- ts(values, start=c(2015, 1), end=c(2017, 7), frequency=12)
class(myts)
start(myts)
summary(myts)
plot(myts)
abline(reg=lm(myts~time(myts)))
cycle(myts)
boxplot(myts~cycle(myts))
fit <- arima(log(myts), c(0, 1, 1),seasonal = list(order = c(0, 1, 1), period = 12))
pred <- predict(fit, n.ahead = 10*12)
ts.plot(myts,2.718^pred$pred, log = "y", lty = c(1,3))
library(MASS)
data()
Arvind <- Animals
Arvind <- Animals
print(Arvind)
View(Arvind)
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
detach(mtcars)
mtcars
pdf("mygraph.pdf")
attach(mtcars)
plot(wt, mpg)
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
detach(mtcars)
dev.off()
dev.new()
dose <- c(20,30,40,45,60)
drugA <- c(16,2027,40,60)
drugB <- c(15,18,25,31,40)
plot(dose,drugA,type = "b")
dose <- c(20,30,40,45,60)
drugA <- c(16,20,27,40,60)
drugB <- c(15,18,25,31,40)
plot(dose,drugA,type = "b")
dose <- c(20,30,40,45,60)
drugA <- c(16,20,27,40,60)
drugB <- c(15,18,25,31,40)
plot(dose,drugA)
plotFun()
library(readxl)
Sales_Effrots_Emp_master_data_Prizma <- read_excel("C:/Users/Neebal/Desktop/Sales & Effrots Emp master data- Prizma.xlsx")
View(Sales_Effrots_Emp_master_data_Prizma)
print("Hello World!")
View(submit)
version
setwd("C:/Users/Neebal/Desktop/Projects in R/Big mart")
library(data.table) # used for reading and manipulation of data
library(dplyr)      # used for data manipulation and joining
library(ggplot2)    # used for ploting
library(caret)      # used for modeling
library(corrplot)   # used for making correlation plot
library(xgboost)    # used for building XGBoost model
library(cowplot)    # used for combining multiple plots
library(magrittr)
train = fread("Train_UWu5bXk.csv")
test = fread("Test_u94Q5KV.csv")
submission = fread("SampleSubmission_TmnO39y.csv")
test[, Item_Outlet_Sales := NA]
combi = rbind(train, test)
dim(combi)
str(combi)
ggplot(train) + geom_histogram(aes(train$Item_Outlet_Sales),
binwidth = 100, fill = "darkgreen") + xlab("Item Outlet Sales")
p1 = ggplot(combi) + geom_histogram(aes(Item_Weight), binwidth = 0.5, fill = "blue")
p2 = ggplot(combi) + geom_histogram(aes(Item_Visibility), binwidth = 0.005, fill = "blue")
p3 = ggplot(combi) + geom_histogram(aes(Item_MRP), binwidth = 1, fill = "blue" )
plot_grid(p1, p2, p3, nrow = 1) #plot_grid() from cowplot package
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
library("dplyr", lib.loc="~/R/R-3.4.1/library")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
#Checking and plotting the categorical variables
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
install.packages("dplyr")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
library("dplyr", lib.loc="~/R/R-3.4.1/library")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "cyan")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "cyan1")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "fuschia")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "fuchsia")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral2")
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
combi$Item_Fat_Content[combi$Item_Fat_Content == "LF"] = "Low Fat"
combi$Item_Fat_Content[combi$Item_Fat_Content == "low fat"] = "Low Fat"
combi$Item_Fat_Content[combi$Item_Fat_Content == "reg"] = "Regular"
ggplot(combi %>% group_by(Item_Fat_Content) %>% summarise(Count = n())) +
geom_bar(aes(Item_Fat_Content, Count), stat = "identity", fill = "coral1")
p4 = ggplot(combi %>% group_by(Item_Type) %>% summarise(Count = n())) +
geom_bar(aes(Item_Type, Count), stat = "identity", fill = "coral1") +
xlab("") +
geom_label(aes(Item_Type, Count, label = Count), vjust = 0.5) +
theme(axis.text = element_text(angle = 45, hjust = 1))+
ggtitle("Item_Type")
p4 = ggplot(combi %>% group_by(Item_Type) %>% summarise(Count = n())) +
geom_bar(aes(Item_Type, Count), stat = "identity", fill = "coral1") +
xlab("") +
geom_label(aes(Item_Type, Count, label = Count), vjust = 0.5) +
theme(axis.text = element_text(angle = 45, hjust = 1))+
ggtitle("Item_Type")
p4 = ggplot(combi %>% group_by(Item_Type) %>% summarise(Count = n())) +
geom_bar(aes(Item_Type, Count), stat = "identity", fill = "coral1") +
xlab("") +
geom_label(aes(Item_Type, Count, label = Count), vjust = 0.5) +
theme(axis.text = element_text(angle = 45, hjust = 1))+
ggtitle("Item_Type")
p5 = ggplot(combi %>% group_by(Outlet_Identifier) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Identifier, Count), stat = "identity", fill = "coral1") +
geom_label(aes(Outlet_Identifier, Count, label = Count), vjust = 0.5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
es
#Plot for Item_Type
p4 = ggplot(combi %>% group_by(Item_Type) %>% summarise(Count = n())) +
geom_bar(aes(Item_Type, Count), stat = "identity", fill = "coral1") +
xlab("") +
geom_label(aes(Item_Type, Count, label = Count), vjust = 0.5) +
theme(axis.text = element_text(angle = 45, hjust = 1))+
ggtitle("Item_Type")
# plot for Outlet_Identifier
p5 = ggplot(combi %>% group_by(Outlet_Identifier) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Identifier, Count), stat = "identity", fill = "coral1") +
geom_label(aes(Outlet_Identifier, Count, label = Count), vjust = 0.5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot for Outlet_Size
p6 = ggplot(combi %>% group_by(Outlet_Size) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Size, Count), stat = "identity", fill = "coral1") +
geom_label(aes(Outlet_Size, Count, label = Count), vjust = 0.5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
second_row = plot_grid(p5, p6, nrow = 1)
plot_grid(p4, second_row, ncol = 1)
#Plot for Item_Type
p4 = ggplot(combi %>% group_by(Item_Type) %>% summarise(Count = n())) +
geom_bar(aes(Item_Type, Count), stat = "identity", fill = "coral1") +
xlab("") +
geom_label(aes(Item_Type, Count, label = Count), vjust = 0.5) +
theme(axis.text = element_text(angle = 45, hjust = 1))+
ggtitle("Item_Type")
# plot for Outlet_Identifier
p5 = ggplot(combi %>% group_by(Outlet_Identifier) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Identifier, Count), stat = "identity", fill = "coral1") +
geom_label(aes(Outlet_Identifier, Count, label = Count), vjust = 0.5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# plot for Outlet_Size
p6 = ggplot(combi %>% group_by(Outlet_Size) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Size, Count), stat = "identity", fill = "coral1") +
geom_label(aes(Outlet_Size, Count, label = Count), vjust = 0.5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
second_row = plot_grid(p5, p6, nrow = 1)
plot_grid(p4, second_row, ncol = 1)
p6 = ggplot(combi %>% group_by(Outlet_Size) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Size, Count), stat = "identity", fill = "coral1") +
geom_label(aes(Outlet_Size, Count, label = Count), vjust = 0.5) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
second_row = plot_grid(p5, p6, nrow = 1)
plot_grid(p4, second_row, ncol = 1)
p7 = ggplot(combi %>% group_by(Outlet_Establishment_Year) %>% summarise(Count = n())) +
geom_bar(aes(factor(Outlet_Establishment_Year), Count), stat = "identity", fill = "coral1") +
geom_label(aes(factor(Outlet_Establishment_Year), Count, label = Count), vjust = 0.5) +
xlab("Outlet_Establishment_Year") +
theme(axis.text.x = element_text(size = 8.5))
p7 = ggplot(combi %>% group_by(Outlet_Establishment_Year) %>% summarise(Count = n())) +
geom_bar(aes(factor(Outlet_Establishment_Year), Count), stat = "identity", fill = "coral1") +
geom_label(aes(factor(Outlet_Establishment_Year), Count, label = Count), vjust = 0.5) +
xlab("Outlet_Establishment_Year") +
theme(axis.text.x = element_text(size = 8.5))
ment_Year
p7 = ggplot(combi %>% group_by(Outlet_Establishment_Year) %>% summarise(Count = n())) +
geom_bar(aes(factor(Outlet_Establishment_Year), Count), stat = "identity", fill = "coral1") +
geom_label(aes(factor(Outlet_Establishment_Year), Count, label = Count), vjust = 0.5) +
xlab("Outlet_Establishment_Year") +
theme(axis.text.x = element_text(size = 8.5))
# plot for Outlet_Type
p8 = ggplot(combi %>% group_by(Outlet_Type) %>% summarise(Count = n())) +
geom_bar(aes(Outlet_Type, Count), stat = "identity", fill = "coral1") +
geom_label(aes(factor(Outlet_Type), Count, label = Count), vjust = 0.5) +
theme(axis.text.x = element_text(size = 8.5))
# ploting both plots together
plot_grid(p7, p8, ncol = 2)
